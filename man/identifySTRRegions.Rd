% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/STR_Region_Identification.R
\name{identifySTRRegions}
\alias{identifySTRRegions}
\title{Identify the STR regions of a fastq-file or ShortReadQ-object.}
\usage{
identifySTRRegions(reads, flankingRegions, numberOfMutation, control)
}
\arguments{
\item{reads}{either a fastq-file location or a ShortReadQ-object}

\item{flankingRegions}{containing marker ID/name, the directly adjacent forward and reverse flanking regions, used for identification.}

\item{numberOfMutation}{the maximum number of mutations (base-calling errors) allowed during flanking region identification.}

\item{control}{an \link{identifySTRRegions.control}-object.}
}
\value{
The returned object is a list of lists. If the reverse complement strings are not included or if the \code{control$combineLists == TRUE},
a list, contains lists of untrimmed and trimmed strings for each row in \code{flankingRegions}. If \code{control$combineLists == FALSE}, the function returns a list of two such lists,
one for forward strings and one for the reverse complement strings.
}
\description{
\code{identifySTRRegions} takes a fastq-file location or a ShortReadQ-object and identifies the STR regions
based on a directly adjacent flanking regions.
The function allows for mutation in the flanking regions through the numberOfMutation argument.
}
\examples{
library("Biostrings")
library("ShortRead")
library("tidyverse")

read_path <- system.file('sampleFiles', package = 'STRMPS')

flankingRegionsPath <- system.file("flankingregions", "", package = "STRMPS")
flankingRegions <-
    STRMPS:::.loadRData(paste(flankingRegionsPath,
                              "flankingRegionsForenSeqSTRsShifted.RData", sep = "/")) \%>\%
    filter(Type == "AUTOSOMAL")

control = workflow.control()

# Read the file into memory
readfile <- readFastq(read_path)
sread(readfile)
quality(readfile)

# Identify the STR's of the file
identifiedSTRs <- identifySTRRegions(reads = readfile, flankingRegions = flankingRegions,
                                     numberOfMutation = control$numberOfMutations,
                                     control = identifySTRRegions.control(
                                         numberOfThreads = control$numberOfThreads,
                                         includeReverseComplement = FALSE))

}
